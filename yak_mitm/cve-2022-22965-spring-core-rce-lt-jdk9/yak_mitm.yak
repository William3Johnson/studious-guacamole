#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    // results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://..............:8080/petclinic/owners/new")
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://127.0.0.1:8089/")
    if err != nil {
        println(err)
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results
    mirrorNewWebsite(results...)
}

/*
type palm/common/mutate.(FuzzHTTPRequest) struct {
  Fields(可用字段):
      Opts: []mutate.BuildFuzzHTTPRequestOption
  StructMethods(结构方法/函数):
  PtrStructMethods(指针结构方法/函数):
      func Exec(v1 ...func httpPoolConfigOption(v1: *mutate.httpPoolConfig) ) return(chan *mutate._httpResult, error)
      func ExecFirst(v1 ...func httpPoolConfigOption(v1: *mutate.httpPoolConfig) ) return(*mutate._httpResult, error)
      func FuzzCookie(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzCookieRaw(v1: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzFormEncoded(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzGetParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzGetParamsRaw(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzHTTPHeader(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzMethod(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzPath(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostJsonParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostRaw(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadFile(v1: interface {}, v2: interface {}, v3: []uint8) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadFileName(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadKVPair(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func GetCommonParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetCookieParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetGetQueryParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetOriginHTTPRequest() return(*http.Request, error)
      func GetPostJsonParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetPostParams() return([]*mutate.FuzzHTTPRequestParam)
      func IsBodyFormEncoded() return(bool)
      func IsBodyJsonEncoded() return(bool)
      func IsBodyUrlEncoded() return(bool)
      func IsEmptyBody() return(bool)
      func ParamsHash() return(string, error)
      func Repeat(v1: int) return(mutate.FuzzHTTPRequestIf)
      func Results() return([]*http.Request, error)
      func Show()
}
*/


counter = 0
lock = sync.NewMutex()
add = fn() {
    lock.Lock()
    counter ++
    lock.Unlock()
}
sub = fn() {
    lock.Lock()
    counter --
    lock.Unlock()
}


# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    wg = sync.NewWaitGroup()
    wg.Add(2)
    go func{
        defer wg.Done()
        checking("GET", isHttps, url, req, rsp, body)
    }
    go func{
        defer wg.Done()
        checking("POST", isHttps, url, req, rsp, body)
    }
    wg.Wait()
}
checking = func(method, isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    add()
    defer sub()

    host,port, _ = str.ParseStringToHostPort(url)
    addr = str.HostPort(host, port)

    printf("start to identify CVE-2022-22965: %v\n", url)
    freq, err = fuzz.HTTPRequest(req, fuzz.https(isHttps))   
    die(err)
    freq = freq.FuzzMethod(method)

    if method == "POST" {
        freq = freq.FuzzHTTPHeader("Content-Type", "application/x-www-form-urlencoded")
    }

    // class.module.class.module.class.module.class.module.classLoader.xx=x 
    //      This Payload will cause error: abstract class not loaded (auto-grow nested)
    /*
        <p>Invalid property 'class.module.class.module.class.module.class.module.classLoader' of bean class [java.lang.Class]: Could not instantiate property type [java.lang.ClassLoader] to auto-grow nested property path; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [java.lang.ClassLoader]: Is it an abstract class?; nested exception is java.lang.InstantiationException</p>
    */
    longErrorIns = var
    if method == "POST" {
        yakit_output("START CHECKING POST long payload")
        longErrorIns = freq.FuzzPostParams("class.module.class.module.class.module.class.module.classLoader.xx", str.RandStr(10)).ExecFirst()[0]
    }else{
        longErrorIns = freq.FuzzGetParams("class.module.class.module.class.module.class.module.classLoader.xx", str.RandStr(10)).ExecFirst()[0] 
    }
    if longErrorIns != nil && str.MatchAllOfSubString(string(longErrorIns.ResponseRaw), 
        "Could not instantiate property type [java.lang.ClassLoader] to auto-grow nested property path",
        "java.lang.InstantiationException", "Failed to instantiate [java.lang.ClassLoader]: Is it an abstract class",
    ) {
        yakit_output(sprintf("Long Payload [%v]class.module.class.module.# cause error! %v, %v", method, "CVE-2022-22965", addr))
        risk.NewRisk(
            url, 
            risk.severity("critical"), 
            risk.type("rce"), 
            risk.title(sprintf("CVE-2022-22965: spring-core rce jdk9+(multi class.module err): %v", addr)),
            risk.payload("class.module.class.module.class.module.class.module.classLoader.xx=randomstr"),
            risk.details({"method": method, "url": url, "reason": "abstract class loaded error", "status_code": longErrorIns.Response.StatusCode}),
        )
        return
    }

    rsp1 = make([]byte)
    rsp1_1 = make([]byte)
    if method == "GET" {
        rsp1 = freq.FuzzGetParams("class.module.classLoader.DefaultAssertionStatus", "True").ExecFirst()[0].ResponseRaw
        rsp1_1 = freq.FuzzGetParams("class.module.classLoader.DefaultAssertionStatus", "False").ExecFirst()[0].ResponseRaw
        // rsp1 = freq.FuzzGetParams("class.module.classLoader.URLs[0]", "http://www.example.com").ExecFirst()[0].ResponseRaw
        // rsp1_1 = freq.FuzzGetParams("class.module.classLoader.URLs[0]", "http://www.example1.com").ExecFirst()[0].ResponseRaw
    } else {
        rsp1 = freq.FuzzPostParams("class.module.classLoader.DefaultAssertionStatus", "True").ExecFirst()[0].ResponseRaw
        rsp1_1 = freq.FuzzPostParams("class.module.classLoader.DefaultAssertionStatus", "False").ExecFirst()[0].ResponseRaw
        // rsp1 = freq.FuzzPostParams("class.module.classLoader.URLs[0]", "http://www.example.com").ExecFirst()[0].ResponseRaw
        // rsp1_1 = freq.FuzzPostParams("class.module.classLoader.URLs[0]", "http://www.example1.com").ExecFirst()[0].ResponseRaw
    }
    if !(len(rsp1) > 0 && len(rsp1_1) > 0) {
        return
    }

    rsp2 = make([]byte)
    if method == "GET" {
        // rsp2 = freq.FuzzGetParams("class.module.classLoader.URLs[0]", "0").ExecFirst()[0].ResponseRaw
        rsp2 = freq.FuzzGetParams("class.module.classLoader.DefaultAssertionStatus", str.RandStr(10)).ExecFirst()[0].ResponseRaw
    }else{
        // rsp2 = freq.FuzzPostParams("class.module.classLoader.URLs[0]", "0").ExecFirst()[0].ResponseRaw
        rsp2 = freq.FuzzPostParams("class.module.classLoader.DefaultAssertionStatus", str.RandStr(10)).ExecFirst()[0].ResponseRaw
    }
    if len(rsp2) <= 0 {
        return
    }

    if judge.CompareRaw(rsp1, rsp1_1) < 0.9 {
        return
    }

    ratio = judge.CompareRaw(rsp1, rsp2)
    if (ratio > 0.75 || judge.CompareRaw(rsp1_1, rsp2) > 0.75 || judge.CompareRaw(rsp, rsp2) > 0.85 ) {
        // 说明结果相似，则不存在漏洞
        return
    }

    yakit_output(sprintf("CVE-2022-22965：%v RATIO: %v", addr, ratio))
    risk.NewRisk(
        url, 
        risk.severity("critical"), 
        risk.title(sprintf("CVE-2022-22965: spring-core rce jdk9+: %v", addr)),
        risk.type("rce"),
        risk.details({
            "url": url, "reason": "URLs[0]=0 's page is abnormal", "reason_verbose": "基于报错 URLs[0]=0 与 正常 URL 不报错来判断",
            "method": method,
        }),
    )
}
