# port scan plugin
yakit.AutoInitYakit()

/*
本插件定义的函数主要用于端口扫描的额外扩展

函数定义如下：
func(result *fp.MatchResult)

// 详细结构体定义与内容见模版结尾
// 这里最关键的是，如果对扫描出的结果有疑问，需要对 MatchResult 进行修改，应该直接
// 对变量.Field 进行修改。

DEMO:

handle = func(result) {
    if result.Fingerprint != nil {
        if result.Port == 80 && result.GetServiceName() == "" {
            result.Fingerprint.ServiceName = "http"
        }
    }
}

*/

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    // activemq 端口一般
    if !result.IsOpen() {
        return
    }

    if len(result.Fingerprint.HttpFlows) <= 0 {
        return
    }

    target = str.HostPort(result.Target, result.Port)

    rsp, _, err = poc.HTTP(`GET /admin/ HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36
`, poc.params({
    "target": str.HostPort(result.Target, result.Port),
}))
    // yakit.Text(rsp)
    if !str.MatchAllOfSubString(rsp, "WWW-Authenticate:") {
        yakit.Error("WWW-Authenticate Identify failed")
        return
    }

    // 指纹识别
    yakit.Info("Found ActiveMQ Admin Panel")
    if result.Fingerprint != nil {
        result.Fingerprint.ServiceName = "activemq"
        result.Fingerprint.ProductVerbose = "Apache ActiveMQ"
        result.Fingerprint.CPEs = append(result.Fingerprint.CPEs, "cpe:/a:apache:activemq:*")
        yakit.Info("ActiveMQ Fingerprint Detected")
    }
    
    rsp, req, err = poc.HTTP(`GET /admin/ HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36
Authorization: Basic {{base64(admin:admin)}}

`, poc.params({
    "target": str.HostPort(result.Target, result.Port),
}))
    die(err)



    if str.MatchAllOfSubString(rsp, "ActiveMQ Console</title>") {
        risk.NewRisk(
            target, risk.title("ActiveMQ Default Authorization: " + target), risk.titleVerbose(str.f("ActiveMQ 默认密码登陆：%v", target)),
            risk.type("unauth"), risk.typeVerbose("未授权访问"), risk.payload("Authorization: Basic {{base64(admin:admin)}}"),
            risk.parameter("basic-auth"), risk.severity("critical"),
        )
    } else{
        yakit.Info("无 Active 默认密码风险：%v", target)
    }
}

/*
// 具体定义如下：
type palm/common/fp.(MatchResult) struct {
      Target: string  
      Port: int  
      State: fp.PortState  
      Reason: string  
      Fingerprint: *fp.FingerprintInfo  
  StructMethods(结构方法/函数): 
  PtrStructMethods(指针结构方法/函数): 
      func GetBanner() return(string) 
      func GetCPEs() return([]string) 
      func GetDomains() return([]string) 
      func GetHtmlTitle() return(string) 
      func GetProto() return(fp.TransportProto) 
      func GetServiceName() return(string) 
      func IsOpen() return(bool) 
      func String() return(string) 
}


type palm/common/fp.(FingerprintInfo) struct {
      IP: string  
      Port: int  
      Proto: fp.TransportProto  
      ServiceName: string  
      ProductVerbose: string  
      Info: string  
      Version: string  
      Hostname: string  
      OperationVerbose: string  
      DeviceType: string  
      CPEs: []string  
      Raw: string  
      Banner: string  
      CPEFromUrls: map[string][]*webfingerprint.CPE  
      HttpFlows: []*fp.HTTPFlow  
  StructMethods(结构方法/函数): 
  PtrStructMethods(指针结构方法/函数): 
      func FromRegexp2Match(v1: *regexp2.Match) 
}
*/

