# port scan plugin
yakit.AutoInitYakit()

/*
本插件定义的函数主要用于端口扫描的额外扩展

函数定义如下：
func(result *fp.MatchResult)

// 详细结构体定义与内容见模版结尾
// 这里最关键的是，如果对扫描出的结果有疑问，需要对 MatchResult 进行修改，应该直接
// 对变量.Field 进行修改。

DEMO:

handle = func(result) {
    if result.Fingerprint != nil {
        if result.Port == 80 && result.GetServiceName() == "" {
            result.Fingerprint.ServiceName = "http"
        }
    }
}

*/

rules = []
addRule = func(path, check /* func(ins: *http.Response, rsp: header, body: []byte)*/ , riskType, riskTypeVerbose, severity) {
    rules = append(rules, {
        "path": path,
        "check": check,
        "type": riskType,
        "typeVerbose": riskTypeVerbose,
        "severity": severity,
    })
}

tmp = `GET {{params(path)}} HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0

`

// index of page
for _, path = range [
    "/data/", "/access/", "/./",
    "/code/", "/php/", "/assets/",
    "/wp-includes/", "/static/",
    "/archive/", "/download/", "/downloads/",
    "/temp/",
] {
    addRule(path, func(_, header, body){
        if str.MatchAllOfSubString(body, "Everything</title>", `class="indexof"`) || 
            (str.MatchAllOfRegexp(body, `(?i)Index of`) && (str.MatchAllOfRegexp(body, `(?i)Parent Directory`) || str.MatchAllOfSubString(body, `<a href="../">../</a>`))) || 
            str.MatchAllOfRegexp(body, `(?i)Directory Listing For`) ||
            (str.MatchAllOfSubString(body, `Caddy</a>`) && str.MatchAllOfSubString(body, `directory</span>`) && str.MatchAllOfSubString(body, `Modified</a>`)) {
            return true
        }
        return false
    }, "directory-leak", "目录泄漏", "high")
}

addRule("/crossdomain.xml", func(rsp, header, body) {
    if str.MatchAllOfSubString(body, `<allow-access-from domain="*`) {
        return true
    }
    return false
}, "crossdomain-leak", "CrossDomain 配置信息", "middle")


// /etc/passwd
for _, path = range [
    "/etc/passwd",
    "/../../../../../../../../../../etc/passwd",
] {
    addRule(path, func(_, header, body){
        return str.MatchAnyOfSubString(body, `root:x:`, `root:!:`)
    }, "passwd-leak", "Linux 密码文件泄漏", "high")
}

addRule("/server-status", func(_, header, body) {
    return str.MatchAnyOfSubString(body, `<title>Apache Status</title>`)
}, "apache-info-leak", "Apache 服务器状态泄漏", "middle")

addRule("/solr/", func(_, header, body) {
    return str.MatchAnyOfSubString(body, `<title>Solr Admin</title>`)
}, "solr-admin", "Solr 后台泄漏", "high")

addRule("/examples/", func(_, header, body) {
    return str.MatchAllOfRegexp(body, `(?i)<title>Apache Tomcat Examples</title>`)
}, "tomcat-example", "Tomcat 测试用例泄漏", "middle")

addRule("/manager/html", func(rsp, header, body) {
    if rsp.StatusCode == 401 && str.MatchAllOfSubString(body, `conf/tomcat-users.xml`) {
        return true
    }
    return false
}, "tomcat-admin", "Tomcat 后台泄露", "high")

addRule("/jmx-console/HtmlAdaptor", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `JBoss Management Console`, `<title>JBoss JMX Management Console</title>`, `(e.g. "jboss:*", "*:service=invoker,*")`, `<h1>JMX Agent View`, `name=jboss.admin`) {
        return true
    }
    return false
}, "jboss-admin", "JBoss 后台泄露", "high")

addRule("/cacti/", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `<title>Login to Cacti</title>`, `Please enter your Cacti user name and password below:`) {
        return true
    }
    return false
}, "cacti-admin", "Cacti 后台泄露", "high")

addRule("/zabbix/", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `name="Author" content="Zabbix SIA"`, `<div class="zabbix-logo">`, `>Zabbix SIA</a></foo`) {
        return true
    }
    return false
}, "zabbix-admin", "Zabbix 后台泄露", "high")

addRule("/jenkins/script", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `Type in an arbitrary`) {
        return true
    }
    return false
}, "jenkins-script-leak", "Jenkins 脚本执行", "critical")

addRule("/memadmin/index.php", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `<title>Login - MemAdmin`) {
        return true
    }
    if str.MatchAnyOfSubString(body, `class="niceform"`, `<h2>Login Form</h2>`) {
        return true
    }
    return false
}, "memadmin-login", "MemAdmin 后台泄漏", "high")

for _, i = range [
    "/phpmyadmin/index.php",
    "/_phpmyadmin/index.php",
    "/phpMyAdmin/index.php",
    "/pma/index.php",
    "/README",
] {
    addRule(i, func(rsp, header, body) {
        if str.MatchAnyOfSubString(body, `<title>phpMyAdmin`, `phpMyAdmin - Readme`) {
            return true
        }
        return false
    }, "phpmyadmin-admin", "PhpMyAdmin 后台泄漏", "high")
}

addRule("/resin-admin/", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `<title>Resin Admin Login for`) {
        return true
    }
    return false
}, "resin-admin", "Resin 后台泄漏", "high")

addRule("/.svn/entries", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `-props`) {
        return true
    }
    return false
}, "svm-leak", "SVM 代码托管泄漏", "critical")

addRule("/.git/index", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `BIRC`) {
        return true
    }
    return false
}, "git-leak", "GIT 代码托管泄漏", "critical")

addRule("/.git/config", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `[core]`) {
        return true
    }
    return false
}, "git-leak", "GIT 代码托管泄漏", "critical")

addRule("/.git/HEAD", func(rsp, header, body) {
    if str.MatchAnyOfSubString(body, `refs/heads`) {
        return true
    }
    return false
}, "git-leak", "GIT 代码托管泄漏", "critical")

handleRule = func(swg, isTls, addr, rule) {
    swg.Add()
    go func{
        defer swg.Done()

        defer func{
            recover()
        }

        resp, req, err = poc.HTTP(tmp, poc.https(isTls), poc.params({"target": addr, "path": rule.path}))
        if err != nil {
            yakit.Error("poc.HTTP error: %v", err)
            return
        }
        header, body = poc.Split(resp)
        rspIns, _ = poc.ParseBytesToHTTPResponse(resp)
        urlIns, _ = str.ExtractURLFromHTTPRequestRaw(req, isTls)
        url = urlIns.String()
        if rule.check(rspIns, header, body) {
            yakit.Info("FOUND INFO for %v", rule.path)
            risk.NewRisk(
                url, risk.severity(rule.severity), 
                risk.title(sprintf("HTTP Directory Brute[%v]: %v", rule.type, rule.path)),
                risk.titleVerbose(sprintf("Web 目录爆破[%v]: %v", rule.typeVerbose, rule.path)),
                risk.type(rule.type), risk.typeVerbose(rule.typeVerbose),
                risk.payload(rule.path), risk.details({
                    "request": req,
                    "response": resp,
                    "url": url,
                    "path": rule.path,
                }),
            )
            return
        }
        return
    }
}

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen() {
        return
    }

    if len(result.Fingerprint.HttpFlows) <= 0 {
        return
    }

    addr = str.HostPort(result.Target, result.Port)
    isTls = str.IsTLSServer(str.HostPort(result.Target, result.Port))

    swg = sync.NewSizedWaitGroup(10)
    for _, rule = range rules {
        yakit.Info("Start to check path: %v", rule.path)
        handleRule(swg, isTls, addr, rule)
    }
    swg.Wait()
}

/*
// 具体定义如下：
type palm/common/fp.(MatchResult) struct {
      Target: string  
      Port: int  
      State: fp.PortState  
      Reason: string  
      Fingerprint: *fp.FingerprintInfo  
  StructMethods(结构方法/函数): 
  PtrStructMethods(指针结构方法/函数): 
      func GetBanner() return(string) 
      func GetCPEs() return([]string) 
      func GetDomains() return([]string) 
      func GetHtmlTitle() return(string) 
      func GetProto() return(fp.TransportProto) 
      func GetServiceName() return(string) 
      func IsOpen() return(bool) 
      func String() return(string) 
}


type palm/common/fp.(FingerprintInfo) struct {
      IP: string  
      Port: int  
      Proto: fp.TransportProto  
      ServiceName: string  
      ProductVerbose: string  
      Info: string  
      Version: string  
      Hostname: string  
      OperationVerbose: string  
      DeviceType: string  
      CPEs: []string  
      Raw: string  
      Banner: string  
      CPEFromUrls: map[string][]*webfingerprint.CPE  
      HttpFlows: []*fp.HTTPFlow  
  StructMethods(结构方法/函数): 
  PtrStructMethods(指针结构方法/函数): 
      func FromRegexp2Match(v1: *regexp2.Match) 
}
*/

