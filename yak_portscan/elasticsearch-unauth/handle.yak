# port scan plugin
yakit.AutoInitYakit()

/*
本插件定义的函数主要用于端口扫描的额外扩展

函数定义如下：
func(result *fp.MatchResult)

// 详细结构体定义与内容见模版结尾
// 这里最关键的是，如果对扫描出的结果有疑问，需要对 MatchResult 进行修改，应该直接
// 对变量.Field 进行修改。

DEMO:

handle = func(result) {
    if result.Fingerprint != nil {
        if result.Port == 80 && result.GetServiceName() == "" {
            result.Fingerprint.ServiceName = "http"
        }
    }
}

*/

handle = func(result /* *fp.MatchResult */) {
    // handle match result
    if !result.IsOpen()  {return}
    if len(result.Fingerprint.HttpFlows) <= 0 {return}

    addr := str.HostPort(result.Target, result.Port)
    isTls = str.IsTLSServer(addr)

    rsp, req, err := poc.HTTP(`GET / HTTP/1.1
Host: {{params(target)}}
`, poc.https(isTls), poc.params({"target": addr}))
    if err != nil {
        return
    }

    _, body := poc.Split(rsp)
    if !str.MatchAllOfSubString(body, "You Know, for Search") {
        return
    }

    rsp, req, err = poc.HTTP(`
GET /_cat/ HTTP/1.1
Host: {{params(target)}}
`, poc.params({
    "target": addr,
}), poc.https(isTls))
    if err != nil {
        return
    }

    body := poc.Split(rsp)[1]
    if str.Count(string(body), "/_cat/") > 1 && str.Count(string(body), "=^.^=") > 0 {
        yakit.Info("ElasticSearch 未授权访问检出 /_cat/：%v", addr)
        risk.NewRisk(
            addr, risk.type("unauth"), risk.typeVerbose("未授权访问"), 
            risk.titleVerbose(sprintf("ElasticSearch 未授权访问 (/_cat/): %v", addr)),
            risk.title(sprintf("ElasticSearch Unauth Access (/_cat/): %v", addr)),
            risk.level("middle"), risk.parameter("PATH: /_cat/"),
        )
    }
}

/*
// 具体定义如下：
type palm/common/fp.(MatchResult) struct {
      Target: string  
      Port: int  
      State: fp.PortState  
      Reason: string  
      Fingerprint: *fp.FingerprintInfo  
  StructMethods(结构方法/函数): 
  PtrStructMethods(指针结构方法/函数): 
      func GetBanner() return(string) 
      func GetCPEs() return([]string) 
      func GetDomains() return([]string) 
      func GetHtmlTitle() return(string) 
      func GetProto() return(fp.TransportProto) 
      func GetServiceName() return(string) 
      func IsOpen() return(bool) 
      func String() return(string) 
}


type palm/common/fp.(FingerprintInfo) struct {
      IP: string  
      Port: int  
      Proto: fp.TransportProto  
      ServiceName: string  
      ProductVerbose: string  
      Info: string  
      Version: string  
      Hostname: string  
      OperationVerbose: string  
      DeviceType: string  
      CPEs: []string  
      Raw: string  
      Banner: string  
      CPEFromUrls: map[string][]*webfingerprint.CPE  
      HttpFlows: []*fp.HTTPFlow  
  StructMethods(结构方法/函数): 
  PtrStructMethods(指针结构方法/函数): 
      func FromRegexp2Match(v1: *regexp2.Match) 
}
*/

