yakit.AutoInitYakit()
log.setLevel("info")
fofaemail := cli.String("fofaemail")
Fofakey := cli.String("Fofakey")
fofafilter = cli.String("fofafilter")
fofamaxpage = cli.Int("fofamaxpage")
//是否入库 默认开启，开启会将结果存入端口资产
yakit.Info("Fofa查询条件 %v", fofafilter)
//email及apikey持久化
if fofaemail == ""{
    if Fofakey ==""{
        fofaemail = db.GetKey("fofaemail")
        Fofakey = db.GetKey("Fofakey")
    }else {
        err=db.SetKey("Fofakey", Fofakey)
        die(err)
    }
}elif Fofakey == ""{
        err =db.SetKey("fofaemail", fofaemail)
        die(err)
        
        Fofakey=db.GetKey("Fofakey")
}else{
        err = db.SetKey("fofaemail", fofaemail)
        die(err)
        err =db.SetKey("Fofakey", Fofakey)
        die(err)
}
fofaemail = db.GetKey("fofaemail")
Fofakey = db.GetKey("Fofakey")

yakit.Info("Fofa Email:%v Fofa API KEY:%v",fofaemail,Fofakey)

fofasave = cli.Bool("fofasave")
if fofasave{
    yakit.Info("结果将存入端口资产")
}else{
    yakit.Info("结果将不会存入端口资产")
}

//C段表
yakit.EnableTable("涉及C段表", ["涉及C段"])
outputTableCClass = func(network) {
    data = make(map[string]var)
    data["涉及C段"] = network
    yakit.TableData("涉及C段表", data)
}

yakit.EnableTable("Fafa结果表", ["Addr","Host","HtmlTitle" ,"Domains","Url"])
outputTable = func(Addr,Host,HtmlTitle ,Domains,Url) {
    data = make(map[string]var)
    data["Addr"] = Addr
    data["Host"] = Host
    data["HtmlTitle"] = HtmlTitle
    data["Domains"] = Domains
    data["Url"] = Url
    yakit.TableData("Fafa结果表", data)
}

res, err := spacengine.FofaQuery(fofaemail,Fofakey,fofafilter, spacengine.maxRecord(fofamaxpage))
if err != nil{
    yakit.Error("fofa搜索出错%v",err)
}
die(err)

for r := range res {
    log.info("%v %v %v %v %v", r.Addr,r.Host,r.HtmlTitle,r.Domains,r.Url)
    if fofasave{
        db.SavePortFromResult(r)
    }   
    outputTable(r.Addr,r.Host,r.HtmlTitle ,r.Domains,r.Url)
    network = str.IPv4ToCClassNetwork(str.ParseStringToHostPort(r.Addr)[0])
    log.info("C段%v", network)
    outputTableCClass(network)
}
